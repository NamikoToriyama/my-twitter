// Code generated by MockGen. DO NOT EDIT.
// Source: tweet_repository.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mercari/Week6/Week6/NamikoToriyama/model"
)

// MockTweetRepository is a mock of TweetRepository interface
type MockTweetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTweetRepositoryMockRecorder
}

// MockTweetRepositoryMockRecorder is the mock recorder for MockTweetRepository
type MockTweetRepositoryMockRecorder struct {
	mock *MockTweetRepository
}

// NewMockTweetRepository creates a new mock instance
func NewMockTweetRepository(ctrl *gomock.Controller) *MockTweetRepository {
	mock := &MockTweetRepository{ctrl: ctrl}
	mock.recorder = &MockTweetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTweetRepository) EXPECT() *MockTweetRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockTweetRepository) List(arg0 context.Context) ([]*model.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*model.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTweetRepositoryMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTweetRepository)(nil).List), arg0)
}

// Put mocks base method
func (m *MockTweetRepository) Put(arg0 context.Context, arg1 *model.Tweet) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockTweetRepositoryMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockTweetRepository)(nil).Put), arg0, arg1)
}

// Get mocks base method
func (m *MockTweetRepository) Get(arg0 context.Context, arg1 string) (*model.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*model.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTweetRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTweetRepository)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (m *MockTweetRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTweetRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTweetRepository)(nil).Delete), arg0, arg1)
}
